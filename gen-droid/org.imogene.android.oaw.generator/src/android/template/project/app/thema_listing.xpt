«IMPORT core»
«EXTENSION android::template::MedooAndroidFieldUtilExt»
«DEFINE generate(boolean multilogin) FOR Project »
«FILE "/" + name.toLowerCase() + "/app/" + name.toFirstUpper() + "Listing.java"-»
package org.imogene.android.«name.toLowerCase()-».app;

import java.util.ArrayList;

import com.actionbarsherlock.app.SherlockExpandableListActivity;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuItem;

import org.imogene.android.app.GeneralSettings;
import org.imogene.android.common.entity.ImogHelper;
import org.imogene.android.common.entity.ImogHelper.EntityInfo;
import org.imogene.android.sync.SynchronizationService;
import org.imogene.android.widget.ThemaExpandableListAdapter;
import org.imogene.android.«name.toLowerCase()».R;
«FOREACH entities AS entity-»
import org.imogene.android.«name.toLowerCase()».domain.«entity.name.toFirstUpper()»;
«ENDFOREACH-»
import org.imogene.android.«name.toLowerCase()».security.AccessPolicy;

import android.app.AlertDialog;
import android.app.Dialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.ContentObserver;
import android.os.Bundle;
import android.os.Handler;
import android.view.View;
import android.widget.BaseExpandableListAdapter;
import android.widget.ExpandableListView;

public class «name.toFirstUpper()»Listing extends SherlockExpandableListActivity {

	private	static final int MENU_SYNC_ID = 1;
	
	private static final int DIALOG_EXIT_ID = 1;
	
	private final Handler mHandler = new Handler();
	
	private final ContentObserver mObserver = new ContentObserver(mHandler) {
	
		@Override
		public boolean deliverSelfNotifications() {
			return true;
		}
	
		@Override
		public void onChange(boolean selfChange) {
			super.onChange(selfChange);
			((BaseExpandableListAdapter) getExpandableListAdapter()).notifyDataSetChanged();
		}
	};
	
	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		fillData();
	}
	
	@Override
	protected void onDestroy() {
		super.onDestroy();
		getContentResolver().unregisterContentObserver(mObserver);
	}
	
	public final void restart() {
		startActivity(getIntent());
		finish();
	}
	
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		menu.add(Menu.NONE, MENU_SYNC_ID, Menu.NONE, R.string.ig_menu_sync)
		.setIcon(R.drawable.ig_ic_title_sync)
		.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);

		getSupportMenuInflater().inflate(R.menu.ig_menu_thema_listing, menu);
		«IF multilogin-»
		menu.findItem(R.id.ig_menu_change_user).setVisible(true).setIntent(new Intent(this, MultiUserListing.class));
		«ENDIF-»
		menu.findItem(R.id.ig_menu_preferences).setIntent(new Intent(this, GeneralSettings.class));
		return super.onCreateOptionsMenu(menu);
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case MENU_SYNC_ID :
			SynchronizationService.actionCheck(this);
			return true;
		default :
			return super.onOptionsItemSelected(item);
		}
	}
	
	@Override
	public boolean onChildClick(ExpandableListView parent, View v, int groupPosition, int childPosition, long id) {
		EntityInfo entity = (EntityInfo) getExpandableListAdapter().getChild(groupPosition, childPosition);
		startActivity(new Intent(Intent.ACTION_VIEW, entity.contentUri));
		return true;
	}
	
	@Override
	public void onBackPressed() {
		showDialog(DIALOG_EXIT_ID);
	}

	@Override
	protected Dialog onCreateDialog(int id) {
		switch (id) {
		case DIALOG_EXIT_ID:
			return new AlertDialog.Builder(this)
			.setTitle(android.R.string.dialog_alert_title)
			.setIcon(android.R.drawable.ic_dialog_alert)
			.setMessage(R.string.ig_dialog_quit)
			.setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() {
				@Override
				public void onClick(DialogInterface dialog, int which) {
					finish();
				}
			})
			.setNegativeButton(android.R.string.no, null)
			.create();
		default:
			return super.onCreateDialog(id);
		}
	}
	
	protected final void fillData() {
		ArrayList<Integer> groupData = new ArrayList<Integer>();
		ArrayList<ArrayList<EntityInfo>> childData = new ArrayList<ArrayList<EntityInfo>>();
		
		«IF hasMiscellaneousThema(entities, themas)-»
		ArrayList<EntityInfo> themaMiscellaneous = new ArrayList<EntityInfo>();
		«ENDIF-»
		«FOREACH themas AS thema-»
		ArrayList<EntityInfo> thema«thema.name.toFirstUpper()-» = new ArrayList<EntityInfo>();
		«ENDFOREACH-»
		
		AccessPolicy policy = AccessPolicy.getPolicy(this);

		«FOREACH entities AS entity-»
		«IF entity.topLevel-»
			if (policy.canDirectAccess«entity.name.toFirstUpper()»()) {
				getContentResolver().registerContentObserver(«entity.name.toFirstUpper()».Columns.CONTENT_URI, true, mObserver);
				«IF isInMiscellaneousThema(themas, entity)-»
				themaMiscellaneous.add(ImogHelper.getEntityInfo(«entity.name.toFirstUpper()».class));
				«ELSE-»
				«FOREACH themas AS thema-»
				«IF thema.entities.contains(entity)-»
				thema«thema.name.toFirstUpper()».add(ImogHelper.getEntityInfo(«entity.name.toFirstUpper()».class));
				«ENDIF-»
				«ENDFOREACH-»
				«ENDIF-»
			}
		«ENDIF-»
		«ENDFOREACH-»
		
		«IF hasMiscellaneousThema(entities, themas)-»
		if (!themaMiscellaneous.isEmpty()) {
			groupData.add(R.string.thema_miscellaneous);
			childData.add(themaMiscellaneous);
		}
		«ENDIF-»
		«FOREACH themas AS thema-»
		if (!thema«thema.name.toFirstUpper()-».isEmpty()) {
			groupData.add(R.string.thema_«thema.name.toLowerCase()-»);
			childData.add(thema«thema.name.toFirstUpper()-»);
		}
		«ENDFOREACH-»

		ThemaExpandableListAdapter adapter = new ThemaExpandableListAdapter(this, groupData, childData);
		setListAdapter(adapter);

    }
    
}
«ENDFILE-»
«ENDDEFINE»