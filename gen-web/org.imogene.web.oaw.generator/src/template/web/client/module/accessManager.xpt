«IMPORT core»
«DEFINE generate(String packageName, String projectName) FOR Project»
«FILE projectName.toLowerCase()+"/client/AccessManager.java"»
package org.imogene.«projectName.toLowerCase()».client;

import org.imogene.web.client.util.ImogRoleUtil;
import org.imogene.web.client.util.LocalSession;
import org.imogene.web.shared.proxy.EntityProfileProxy;
import org.imogene.web.shared.proxy.FieldGroupProfileProxy;
import org.imogene.web.shared.proxy.ImogActorProxy;
import org.imogene.web.shared.proxy.ProfileProxy;

/**
 * Class to manage the access to the entity forms and 
 * form groups in read and write mode on the Client side
 * @author MEDES-IMPS
 */
public class AccessManager {
	
	private static String current = null;
	«FOREACH entities AS e-»
	private static boolean canCreate«e.name.toFirstUpper()»;
	private static boolean canDelete«e.name.toFirstUpper()»;
	private static boolean canDirectAccess«e.name.toFirstUpper()»;
	private static boolean canExport«e.name.toFirstUpper()»;
	«FOREACH e.groups AS g-»
	private static boolean canRead«e.name.toFirstUpper()»«g.name.toFirstUpper()»;
	private static boolean canWrite«e.name.toFirstUpper()»«g.name.toFirstUpper()»;
	private static boolean canExport«e.name.toFirstUpper()»«g.name.toFirstUpper()»;
	«ENDFOREACH-»
	«ENDFOREACH-»

	public static boolean canReadForm(String formName) {
		ensureLoaded();
		«FOREACH entities AS e SEPARATOR " else "-»
		if ("«e.name.toLowerCase()»".equals(formName)) {
			«FOREACH e.groups AS g SEPARATOR " else "-»
			if (canReadGroup("«e.name.toLowerCase()».«g.name.toLowerCase()»")) {
				return true;
			}
			«ENDFOREACH-»
			return false;
		}
		«ENDFOREACH-»
		return false;
	}
	
	public static boolean canEditForm(String formName) {
		ensureLoaded();
		«FOREACH entities AS e SEPARATOR " else "-»
		if ("«e.name.toLowerCase()»".equals(formName)) {
			«FOREACH e.groups AS g SEPARATOR " else "-»
			if (canEditGroup("«e.name.toLowerCase()».«g.name.toLowerCase()»")) {
				return true;
			}
			«ENDFOREACH-»
			return false;
		}
		«ENDFOREACH-»
		return false;
	}
	
	public static boolean canCreateForm(String formName) {
		ensureLoaded();
		«FOREACH entities AS e SEPARATOR " else "-»
		if("«e.name.toLowerCase()»".equals(formName)) {
			return canCreate«e.name.toFirstUpper()»;
		}
		«ENDFOREACH»
		return false;
	}	
	
	public static boolean canDirectAccessForm(String formName) {
		ensureLoaded();
		«FOREACH entities AS e SEPARATOR " else "-»
		if("«e.name.toLowerCase()»".equals(formName)) {
			return canDirectAccess«e.name.toFirstUpper()»;
		}
		«ENDFOREACH»
		return false;
	}
	
	public static boolean canReadGroup(String groupName) {
		ensureLoaded();
		«FOREACH entities.groups AS g SEPARATOR " else "-»	
		if("«g.parentCard.name.toLowerCase()».«g.name.toLowerCase()»".equals(groupName)) {
			return canRead«g.parentCard.name.toFirstUpper()»«g.name.toFirstUpper()»;
		}
		«ENDFOREACH-»
		return false;
	}
	
	public static boolean canEditGroup(String groupName) {
		ensureLoaded();
		«FOREACH entities.groups AS g SEPARATOR " else "-»	
		if("«g.parentCard.name.toLowerCase()».«g.name.toLowerCase()»".equals(groupName)) {
			return canWrite«g.parentCard.name.toFirstUpper()»«g.name.toFirstUpper()»;
		}
		«ENDFOREACH-»
		return false;
	}

	/**
	 * 
	 * @return
	 */
	public static boolean isAdmin() {
		return ImogRoleUtil.isAdmin();
	}

	/**
	 * 
	 * @return
	 */
	public static boolean canDelete() {
		return ImogRoleUtil.canDelete();
	}

	/**
	 * 
	 * @return
	 */
	public static boolean canExport() {
		return ImogRoleUtil.canExport();
	}
	
	private static void ensureLoaded() {
		ImogActorProxy actor = LocalSession.get().getCurrentUser();
		if (actor.getId() != current) {
			load(actor);
		}
	}
	
	private static void load(ImogActorProxy actor) {
		current = actor.getId();
		«FOREACH entities AS e-»
		canCreate«e.name.toFirstUpper()» = true;
		canDelete«e.name.toFirstUpper()» = true;
		canDirectAccess«e.name.toFirstUpper()» = true;
		canExport«e.name.toFirstUpper()» = true;
		«FOREACH e.groups AS g-»
		canRead«e.name.toFirstUpper()»«g.name.toFirstUpper()» = true;
		canWrite«e.name.toFirstUpper()»«g.name.toFirstUpper()» = true;
		canExport«e.name.toFirstUpper()»«g.name.toFirstUpper()» = true;
		«ENDFOREACH-»
		«ENDFOREACH-»
		if (isAdmin()) {
			return;
		}
		for (ProfileProxy profile : actor.getProfiles()) {
			for (EntityProfileProxy entity : profile.getEntityProfiles()) {
				«FOREACH entities AS e SEPARATOR " else "-»
				if ("«e.name.toLowerCase()»".equals(entity.getId())) {
					if (entity.getCreate() != null) {
						canCreate«e.name.toFirstUpper()» &= entity.getCreate();
					}
					if (entity.getDelete() != null) {
						canDelete«e.name.toFirstUpper()» &= entity.getDelete();
					}
					if (entity.getDirectAccess() != null) {
						canDirectAccess«e.name.toFirstUpper()» &= entity.getDirectAccess();
					}
					if (entity.getExport() != null) {
						canExport«e.name.toFirstUpper()» &= entity.getExport();
					}
				}
				«ENDFOREACH-»
			}
			for (FieldGroupProfileProxy group : profile.getFieldGroupProfiles()) {
				«FOREACH entities.groups AS g SEPARATOR " else "-»
				if ("«g.parentCard.name.toLowerCase()».«g.name.toLowerCase()»".equals(group.getId())) {
					if (group.getRead()) {
						canRead«g.parentCard.name.toFirstUpper()»«g.name.toFirstUpper()» &= group.getRead();
					}
					if (group.getWrite()) {
						canWrite«g.parentCard.name.toFirstUpper()»«g.name.toFirstUpper()» &= group.getWrite();
					}
					if (group.getExport()) {
						canExport«g.parentCard.name.toFirstUpper()»«g.name.toFirstUpper()» &= group.getExport();
					}
				}
				«ENDFOREACH-»
			}
		}
	}

}
«ENDFILE»
«ENDDEFINE»

